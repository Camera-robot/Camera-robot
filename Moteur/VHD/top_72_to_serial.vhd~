library IEEE;
	use IEEE.std_logic_1164.all;
        use IEEE.std_logic_textio.all;


library lib_trame;
use lib_trame.all;


------------------------------------------------------------------------------------------
----------------------------------------ENTITE--------------------------------------------
------------------------------------------------------------------------------------------

entity top_72_to_serial is
port(	clk	:	in	STD_LOGIC;
	rst	:	in	STD_LOGIC;
	xin     :	in	STD_LOGIC_VECTOR(9 downto 0);
	htop	:	in	STD_LOGIC;
	modetop	:	in	STD_LOGIC;
	LedR	:	out	STD_LOGIC;
	serial_out : 	out	STD_LOGIC
	);
end top_72_to_serial;

------------------------------------------------------------------------------------------
--------------------------------------ARCHITECTURE----------------------------------------
------------------------------------------------------------------------------------------

architecture A_72_to_serial of top_72_to_serial is

------------------------------------------------------------------------------------------
---------------------------DECLARATION DES COMPOSANTS-------------------------------------
------------------------------------------------------------------------------------------

component coor_to_trame is
	Port ( 
	xtop		:	in	STD_LOGIC_VECTOR(9 downto 0);	--,y
	htop		:	in	STD_LOGIC;		--,v
	modetop		:	in	STD_LOGIC;
	clk,rst		:	in	STD_LOGIC;

	new_trame	:	in	STD_LOGIC;	-- signal reÃ§u du decode qui sort de l'Ã©tat bloquant
	str_decode      :       out	STD_LOGIC;
	trametop	:	out	STD_LOGIC_VECTOR(71 downto 0));
end component coor_to_trame;


component decode_servo is
	Port ( clk  : in STD_LOGIC;
			tramein  : in STD_LOGIC_VECTOR (71 downto 0);
			Done 	 : in STD_LOGIC;
			trameout : out STD_LOGIC_VECTOR (7 downto 0);
			start_tx : out STD_LOGIC;
			new_trame: out STD_LOGIC
           );        
end component decode_servo;

component UART_TX is
		 port (
				i_Clk		:	in	std_logic;
				i_TX_DV:in std_logic;--start_transmit
				i_TX_Byte:in std_logic_vector(7 downto 0);
				o_TX_Active:out std_logic;--pas utilisÃ© car le servo sait le debut de la trame par 0xFF 0xFF.
				o_TX_Serial:out std_logic;--donnee
				o_TX_Done:out std_logic--end_transmit
				);
end component UART_TX;

--------------------------------------------------------------------------------------------
--------------------------------DECLARATION DES SIGNAUX-------------------------------------
--------------------------------------------------------------------------------------------


signal trameout_int : STD_LOGIC_VECTOR(7 downto 0);
signal start_tx_int : STD_LOGIC;
signal end_transmit_int : STD_LOGIC;
signal s_restart	:	STD_LOGIC;
signal s_trame : STD_LOGIC_VECTOR(71 downto 0);
--signal s_out	:	STD_LOGIC_VECTOR;
signal s_start_dec : STD_LOGIC;

begin

---------------------------------------------------------------------------------------------
---------------------------------INSTANCIATION-----------------------------------------------
---------------------------------------------------------------------------------------------

U1 : coor_to_trame Port map( 
	xtop		=>	xin,
	htop		=>	htop,
	modetop		=>	modetop,
	clk		=>	clk,
	rst		=>	rst,
	new_trame	=>	s_restart,
	str_decode      =>	s_start_dec,
	trametop	=>	s_trame

	);

U2 : decode_servo port map(
	clk => clk,--entree du top
	tramein => s_trame,--entree du top
	Done=>end_transmit_int,
	trameout => trameout_int,
	start_tx => start_tx_int,
	new_trame=>s_restart
);

U3 : UART_TX port map(
	i_Clk => clk, --entree du top
	i_TX_DV => start_tx_int,
	i_TX_Byte => trameout_int,
	o_TX_Active => LedR,--sortie du top
	o_TX_Serial =>  serial_out,--sortie du top
	o_TX_Done => end_transmit_int
);


--new_trame_out <= s_out;

end A_72_to_serial;
